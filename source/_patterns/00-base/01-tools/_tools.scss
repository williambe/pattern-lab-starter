/* ==========================================================================
Tools (mixins, functions, helpers)
Partial files needed when category include more than four mixin/function 

TOC
- clearfix
- accessibility (partial file)
- units
- media-query
- center (partial file)
- sizing
- spacing
- typography (partial file)
- image-replace
- svg-background
========================================================================== */

/* ==========================================================================
clearfix
from drupal/gesso
========================================================================== */

@mixin clearfix {
  &::after {
    clear: both;
    content: '';
    display: table;
  }
}

@mixin clearfix-important {
  &::after {
    clear: both !important;
    content: '' !important;
    display: table !important;
  }
}

/* ==========================================================================
accessibility (partial file)
========================================================================== */
/* ==========================================================================
units (conversion)
========================================================================== */
// Function â€“ strip-unit
// Strip unit function. Get unitless value.
// from: http://hugogiraudel.com/2013/08/12/sass-functions/
@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

// Convert pixel values to em.
@function em($px, $base: $base-font-size) {
  @return ($px / $base) * 1em;
}

// Convert pixel values to rem.
@function rem($px, $base: $base-font-size) {
  @return ($px / $base) * 1rem;
}
/* ==========================================================================
typography (partial file)
========================================================================== */

/* ==========================================================================
image-replace
from drupal/gesso
========================================================================== */
// After applying mixin, inline elements will need the display property set to
// block or inline-block.
@mixin image-replace($width, $height) {
  height: $height;
  overflow: hidden;
  width: $width;

  &::before {
    content: '';
    display: block;
    height: 150%;
    width: 0;
  }
}

// This image replacement approach works with <input> and <button> elements.
// The font-size declaration may cause problems for SEO and browsers with a
// minimum font-size setting. Other inherited styles might also cause problems.
@mixin image-replace-alt($width, $height) {
  color: transparent;
  font: 0/0 a;
  height: $height;
  text-shadow: none;
  width: $width;
}
/* ==========================================================================
svg-background TO BE TESTED
from drupal/gesso 
========================================================================== */
// Inline SVG background image with a PNG fallback
// Fallback based on: http://pauginer.tumblr.com/post/36614680636/invisible-gradient-technique

@mixin svg-background($image-name, $image-location: '../images/bg/') {
  background-image: url($image-location + $image-name + '.png');
  background-image: linear-gradient(transparent, transparent), url($image-location + $image-name + '.svg');
}

@mixin svgz-background($image-name, $image-location: '../images/bg/') {
  background-image: url($image-location + $image-name + '.png');
  background-image: linear-gradient(transparent, transparent), url($image-location + $image-name + '.svgz');
}

@mixin svg-background-inline($image-name, $image-location: '../images/bg/') {
  background-image: url($image-location + $image-name + '.png');
  background-image: linear-gradient(transparent, transparent), inline($image-location + $image-name + '.svg');
}

@mixin svgz-background-inline($image-name, $image-location: '../images/bg/') {
  background-image: url($image-location + $image-name + '.png');
  background-image: linear-gradient(transparent, transparent), inline($image-location + $image-name + '.svgz');
}
